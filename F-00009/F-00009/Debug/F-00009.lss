
F-00009.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000116  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000d9  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000071  00000000  00000000  00000281  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000a8  00000000  00000000  000002f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000039c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000015e  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  0000052e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00000576  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  8c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <main>:
*/



int main(void)
{
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	00 d0       	rcall	.+0      	; 0x9a <main+0x6>
  9a:	00 d0       	rcall	.+0      	; 0x9c <main+0x8>
  9c:	00 d0       	rcall	.+0      	; 0x9e <main+0xa>
  9e:	cd b7       	in	r28, 0x3d	; 61
  a0:	de b7       	in	r29, 0x3e	; 62
	//cli();
	//Natavení promìnných
	uint16_t	Adress=0;
  a2:	1b 82       	std	Y+3, r1	; 0x03
  a4:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t		device=0;
  a6:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t		ID_Data=0;
  a8:	19 82       	std	Y+1, r1	; 0x01
	uint8_t		BOOT_STATUS=0;
  aa:	1d 82       	std	Y+5, r1	; 0x05
	//RS232_Init(RS232_115200);
    
	uint8_t	cnt=0;
  ac:	1e 82       	std	Y+6, r1	; 0x06
	ID_Data = 0x30;
	*/
	/* Replace with your application code */
    while (1) 
    {
		ID_Data++;
  ae:	89 81       	ldd	r24, Y+1	; 0x01
  b0:	8f 5f       	subi	r24, 0xFF	; 255
  b2:	89 83       	std	Y+1, r24	; 0x01
		if (ID_Data == 255)
  b4:	89 81       	ldd	r24, Y+1	; 0x01
  b6:	8f 3f       	cpi	r24, 0xFF	; 255
  b8:	09 f4       	brne	.+2      	; 0xbc <main+0x28>
		{
			ID_Data = 0;
  ba:	19 82       	std	Y+1, r1	; 0x01
				break;
			
		}
		*/
		
    }
  bc:	f8 cf       	rjmp	.-16     	; 0xae <main+0x1a>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
